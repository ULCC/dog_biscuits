Description:
    The DogBiscuits Work generator makes the following changes to your application:
    1. Checks that the requested Work is supported by DogBiscuits
    2. Runs the Hyrax generator for the given model
    3. Creates a new model, form and indexer to replace the Hyrax one
    4. Injects properties into the Hyrax-generated presenter
    5. Creates an attribute_rows view file using the configured properties for the work
    6. Updates the schema_org config, blacklight (en) locale and work (en) locale using the configured properties for the work
    7. Updates the catalog controller with the configured properties for the work

Example:
    rails generate dog_biscuits:work ConferenceItem

Making changes post-generation:
    You can re-run the generator with the --force or -f flag to update the existing files.
    This may be useful, for example:
        where you wish to locally remove, or configure the order of properties in the form
        where you wish to add a local renderer or change a label in the property_mappings config

Adding local properties
    Add the local property into the model (in app/models/)
    Add an attribute into the solr_document (app/models/solr_document.rb)
    Add the property to the config (config/initializers/dog_biscuits.rb)

      eg.
      # property_mappings
      config.property_mappings[:my_new_property] = {
        label: 'Great New Property'
        help_text: 'Use this for information about great new things.',
        schema_org: {
            # map the new property to http://schema.org/contributor
            property: contributor
            },
        }

      # properties list
      config.work_properties += [:my_new_property]

      # required properties list
      config.work_properties_required += [:my_new_property]

      # make it a facet
      config.facet_properties += [:my_new_property]

      # show in search results
      config.index_properties += [:my_new_property]

    Add custom helper methods or renderers (in app/helpers/ and app/renderers)
      and add them to the property_mappings config:

      eg.
        config.property_mappings[:my_new_property] = {
          label: 'Great New Property'
          help_text: 'Use this for information about great new things.',
          schema_org: {
            property: contributor # this maps the new property to http://schema.org/contributor
            },
          render_as: my_new_renderer,
          helper_method: my_new_helper_method
        }

    The generator can be re-run without overwriting the model file using the --skip_model option

    This will update the form, presenter, catalog_controller, attribute_rows and locales with
    the new property.

Example:
    rails generate dog_biscuits:work ConferenceItem --skip_model